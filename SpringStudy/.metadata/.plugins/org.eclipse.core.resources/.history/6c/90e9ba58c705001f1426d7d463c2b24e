package com.smhrd.myapp.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
//해당하는 파일이 환경설정 파일임을 나타냄
// --> 해당 클래스 안쪽에서 @Bean(객체)들을 하나 이상 정의할 수 있게 해줌.
import org.springframework.security.web.SecurityFilterChain;

import jakarta.servlet.DispatcherType;
// 환경설정 어노테이션 bean테크 사용하능하게
@Configuration 
// 해당 클래스 파일이"Spring Security".용 환경설정 파일
@EnableWebSecurity
public class SecurityConfiguration {
	
	//Bean(객체)
	// : Spring Container에 적대될 수 있는 형태
	// 언제 많이 사용해요?
	// 1. 기능들을 사용자 정의형태로 만들어야할 때 많이 사용
	// 2. 모든 클래스 파일들이 공유해야할 때
	
	// deprecated --> 더 이상 지원하지 않을 문법들.
	// SpringSecurity에서 매개변수로서 권장하는 문법
	// -> lambda식 == 익명함수(해당하는 영역에서만 사용하고,버릴 함수)
	// -> 어나니머스 메소드
	// lamdba식 문법(시각적으로 직관적)
	// () -> 실행할 구문 

	
	// 클래스 안에 또 다른 클래스 설계가 가능함. --> inner class
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		//                            hppt에 시큐리티를 해준다.
		// 해당하는 메소드가 동작하면서 SFC생성할 거고, Bean으로써 등록
		// :: ( lambda식에서 제공해주는  method reference 연산자)
		//1. cors (crooss origin resource sharing) : 동일출처정책 비활성화 하겠다.
		http.cors(AbstractHttpConfigurer::disable)
		//2. csrf(cross site request forgery)비활성화 하겠다.
			.csrf(AbstractHttpConfigurer::disable)
		//3. 우리가 인가를(권한을) 내려줄 페이지를 지정하는 메소드(설정)
			.authorizeHttpRequests((request)->
				request
				.dispatcherTypeMatchers(DispatcherType.FORWARD).permitAll()
				.requestMatchers("/images/**","/join").permitAll()
				.anyRequest().authenticated())//인증받은 대상에게만 허용
		//4. 사용자 지정 페이지로 인증 받을 수 있도록 메소드 설정(인증)
			.formLogin((login)->
					login.loginPage("/")
					.loginProcessingUrl("/login")
					.usernameParameter("userid")
					.passwordParameter("pw")
					.permitAll());
		
		return http.build();
		
	}
	
	
	
	
}
